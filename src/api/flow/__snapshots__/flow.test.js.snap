// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`flow node addNode whatever 1`] = `
Immutable.Map {
  "nodes": Immutable.Map {
    "nodeId": Immutable.Record {
      "id": "nodeId",
      "type": undefined,
      "data": Immutable.Map {
        "properties": Immutable.Map {},
        "label": "",
        "description": "",
        "datasetInfo": Immutable.Map {},
      },
      "graphicalAttributes": Immutable.Map {
        "position": Immutable.Record {
          "x": 100,
          "y": 150,
        },
        "nodeSize": Immutable.Record {
          "width": 70,
          "height": 120,
        },
        "nodeType": "nodeType",
        "label": "",
        "description": "",
        "properties": Immutable.Map {},
      },
      "getPosition": [Function],
      "getSize": [Function],
      "getNodeType": [Function],
    },
  },
  "out": Immutable.Map {
    "nodeId": Immutable.Map {},
  },
  "in": Immutable.Map {
    "nodeId": Immutable.Map {},
  },
  "childrens": Immutable.Map {
    "nodeId": Immutable.Map {},
  },
  "parents": Immutable.Map {
    "nodeId": Immutable.Map {},
  },
}
`;

exports[`flow node deleteNode whatever 1`] = `
Immutable.Map {
  "nodes": Immutable.Map {},
  "out": Immutable.Map {},
  "in": Immutable.Map {},
  "childrens": Immutable.Map {},
  "parents": Immutable.Map {},
}
`;

exports[`flow node updateNode whatever 1`] = `
Immutable.Map {
  "nodes": Immutable.Map {
    "newNodeId": Immutable.Record {
      "id": "newNodeId",
      "type": undefined,
      "data": Immutable.Map {
        "properties": Immutable.Map {},
        "label": "",
        "description": "",
        "datasetInfo": Immutable.Map {},
      },
      "graphicalAttributes": Immutable.Map {
        "position": Immutable.Record {
          "x": 100,
          "y": 150,
        },
        "nodeSize": Immutable.Record {
          "width": 70,
          "height": 120,
        },
        "nodeType": "nodeType",
        "label": "",
        "description": "",
        "properties": Immutable.Map {},
      },
      "getPosition": [Function],
      "getSize": [Function],
      "getNodeType": [Function],
    },
  },
  "out": Immutable.Map {
    "newNodeId": Immutable.Map {},
  },
  "in": Immutable.Map {
    "newNodeId": Immutable.Map {},
  },
  "childrens": Immutable.Map {
    "newNodeId": Immutable.Map {},
  },
  "parents": Immutable.Map {
    "newNodeId": Immutable.Map {},
  },
}
`;
